import React, { useContext, useState } from "react";
import { View, Text, Image, TouchableOpacity, FlatList, StyleSheet, Alert, TextInput } from "react-native";
import Icon from "react-native-vector-icons/FontAwesome";
import { CartContext } from "../context/CartContext";
import * as Notifications from "expo-notifications"; 

const CartScreen = () => {
  const { cartItems, removeFromCart, setCartItems } = useContext(CartContext);
  const [orderInstruction, setOrderInstruction] = useState(""); // L∆∞u tr·ªØ h∆∞·ªõng d·∫´n ƒë∆°n h√†ng

  const handleRemoveItem = (recipeId) => {
    Alert.alert("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√≥n n√†y?", [
      { text: "H·ªßy", style: "cancel" },
      {
        text: "X√≥a",
        onPress: () => removeFromCart(recipeId),
        style: "destructive",
      },
    ]);
  };

  // H√†m x·ª≠ l√Ω khi b·∫•m Checkout
  const handleCheckout = async () => {
    if (cartItems.length === 0) {
      Alert.alert("Gi·ªè h√†ng tr·ªëng", "Vui l√≤ng th√™m m√≥n ƒÉn tr∆∞·ªõc khi thanh to√°n.");
      return;
    }
  
    try {
      const orderData = {
        recipeId: cartItems[0].recipeId,
        locationId: 1,
        robotId: 1,
        orderedTime: new Date().toISOString(),
        status: "pending",
        instruction: orderInstruction,
      };
  
      const response = await fetch("https://autochefsystem.azurewebsites.net/api/Order/create", {
        method: "POST",
        headers: {
          "Accept": "*/*",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(orderData),
      });
  
      const result = await response.json();
      if (response.ok) {
        setCartItems([]);
  
        // ‚úÖ G·ª≠i th√¥ng b√°o ƒë·∫©y sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        await Notifications.scheduleNotificationAsync({
          content: {
            title: "‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!",
            body: "ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.",
            sound: "default",
          },
          trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
        });
  
        Alert.alert("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!", "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } else {
        Alert.alert("‚ö†Ô∏è L·ªói ƒë·∫∑t h√†ng", result.message || "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error("L·ªói khi ƒë·∫∑t h√†ng:", error);
      Alert.alert("‚ùå L·ªói k·∫øt n·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>{cartItems.length} m√≥n trong gi·ªè h√†ng</Text>

      <FlatList
        data={cartItems}
        keyExtractor={(item) => item.recipeId.toString()}
        renderItem={({ item }) => (
          <View style={styles.cartItem}>
            <Image source={{ uri: item.image || "https://via.placeholder.com/70" }} style={styles.image} />
            <Text style={styles.itemName}>{item.recipeName}</Text>
            <TouchableOpacity onPress={() => handleRemoveItem(item.recipeId)}>
              <Icon name="times-circle" size={24} color="red" />
            </TouchableOpacity>
          </View>
        )}
      />

      {/* Input Order Instruction */}
      <Text style={styles.label}>Order Instruction</Text>
      <TextInput
        style={styles.input}
        placeholder="Nh·∫≠p h∆∞·ªõng d·∫´n ƒë∆°n h√†ng..."
        value={orderInstruction}
        onChangeText={setOrderInstruction}
      />

      {/* N√∫t Checkout */}
      <TouchableOpacity
        style={styles.checkoutButton}
        onPress={handleCheckout}
        disabled={cartItems.length === 0}  // V√¥ hi·ªáu h√≥a n·∫øu gi·ªè h√†ng tr·ªëng
      >
        <Text style={styles.checkoutText}>Thanh to√°n</Text>
      </TouchableOpacity>
    </View>
  );
};

export default CartScreen;

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "#F5F5F5" },
  header: { fontSize: 22, fontWeight: "bold", color: "#388E3C", marginBottom: 10 },
  cartItem: { flexDirection: "row", backgroundColor: "#fff", padding: 10, borderRadius: 10, marginBottom: 10 },
  image: { width: 70, height: 70, borderRadius: 10 },
  itemName: { fontSize: 16, fontWeight: "bold", flex: 1 },
  label: { fontSize: 16, marginTop: 10 },
  input: { backgroundColor: "#fff", padding: 10, borderRadius: 5, marginVertical: 10 },
  checkoutButton: { backgroundColor: "#4CAF50", padding: 15, borderRadius: 10, alignItems: "center" },
  checkoutText: { fontSize: 18, color: "#fff", fontWeight: "bold" },
});
